字符型基本介绍：
    --GoLang中没有专门的字符类型，如果要存储单个字符（字母）， 一般使用byte来存储。
    --字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。
    就是说对于传统的字符串是由字符组成的。而Go的字符串不同，它是由字节组成的。
    代码案例：
    package main

    import "fmt"

    func main(){
    	var c1 byte = 'a'
    	var c2 byte = '0'
    	//这样直接输出会输出对应字符的ASCII码
    	fmt.Println("c1=",c1)//=>97
    	fmt.Println("c2=",c2)//=>46
    	//如果我们希望是出对应字符时，则需要使用格式化输出
    	fmt.Printf("c1=%c c2=%c\n",c1,c2)
    	//使用如下方法存储字符，传统byte型会出现溢出
    	var c3 string = "北"
    	fmt.Printf("c3=%s",c3)
    }
字符类型使用细节：
    1）字符常量是用单引号（''）括起来的单个字符，例如：var c1
    byte = 'a' var c2 int = '中'
    2）Go中允许使用转移字符'\'来将其后的字符转变为特殊字符型常量
    例如：var c3 char = '\n'
    3）Go种子的字符使用UTF-8编码
    4）在Go中，字符的本质是一个整数，直接输出时，是该字符对应的UTF-8
    编码的码值
    5）可以直接给某个变量赋一个数字，然后按格式化输出时%c，
    会输出该数字对应的unicode字符
    6）字符类型是可以进修那个计算的，相当于一个整数，因为它都对应有Unicode码
字符类型本质讨论：
    1）字符型存储到计算机中，需要将字符对应的码值（整数）找出来
    存储：字符——》对应码值——》二进制——》存储
    读取：二进制——》码值——》字符——》读取
    2）字符和码值的对应关系是通过字符编码表决定的
    3）Go语言的编码方式都统一成了utf-8，因此程序不会出现乱码的麻烦了
