基本数据类型转换：
    --介绍：GoLang和java/c不同，Go在不同类型的变量之间赋值
    时需要显式转换。也就是说Golang中数据类型不能转换
    --基本语法：
    ——》表达式：T(v)将值v转换为类型T
操作细节：
    1）Go中，数据类型的转换可以是从表示范围小——》表示范围大，也可以反过来
    2）被转换的是变量存储的数据（即值），变量本身的数据类型并没有变化！
    3）在转换中，比如将int64转成int8[-128-127]，编译是不会报错，但是输出值会按照溢出处理
    ！！跨类型之间无法进行算术计算，必须经过显式转换
    ！！当执行算术计算时超过变量域时也会出现异常
基本数据类型和string的转换：
    --介绍：在程序开发中，我们经常将基本数据类型转成string类型，
    或者将string类型转换成基本数据类型
    --方法：1）使用fmt.Sprintf()函数
           2）使用strconv.Format包进行转换
string和基本数据类型的转换：
    --方法：1）使用strconv.Parse包进行转换
    案例：
        package main

        import (
        	"fmt"
        	"strconv"
        )

        //演示Go中的字符串转成基本数据类型
        func main(){
        	var str string = "true"
        	var b bool
        	//说明：
        	//1.strconv.ParseBool(str)函数会返回两个值（value bool,err error)
        	//2.因为返回两个值，但是在Error我们并不关心，因此使用_忽略其返回值
        	b , _ = strconv.ParseBool(str)
        	fmt.Printf("b type is %T and valus is '%v'\nm",b,b)
        	//strconv.ParseInt(str,base,bitsize)
        	//返回值：i int64,err error
        	var str2 = "12345"
        	var num1 int64
        	num1 , _ = strconv.ParseInt(str2,10,0)
        	fmt.Printf("num1 type %T and values is '%v'\n",num1,num1)
        	var str3 string = "123.456"
        	var num2 float64
        	num2 , _ = strconv.ParseFloat(str3,64)
        	fmt.Printf("num2 type %T and values is  '%v'\n",num2,num2)
        }
    注意事项：
        --在将string类型转成基本数据类型时，要确保string类型能够转成有效的数据类型
